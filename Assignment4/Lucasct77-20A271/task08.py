# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JWNL8jz7e1cIy-20XOKKbc0gucKn3FyP

**Task 08: Completing missing data**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4/"

from rdflib import Graph, Namespace, Literal, URIRef
from rdflib.namespace import RDF, RDFS
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"resources/data01.rdf", format="xml")
g2.parse(github_storage+"resources/data02.rdf", format="xml")


"""Task: list all the elements of the class Person in the first graph (data01.rdf) and complete the fields (given name,
 family name and email) that may be missing with the data from the second graph (data02.rdf). 
 You can use SPARQL queries or iterate the graph, or both."""


g1.namespace_manager.bind('ns', Namespace("http://data.org#"), override=False)
g2.namespace_manager.bind('ns', Namespace("http://data.org#"), override=False)
ns = Namespace("http://data.org#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

for a, b, c in g1:
    print(a, b, c)

print(g1.serialize(format="turtle").decode("UTF-8"))

for a, b, c in g1.triples((None, RDF.type, ns.Person)):
    email = g1.value(subject=a, predicate=vcard.EMAIL)
    family = g1.value(subject=a, predicate=vcard.Family)
    given = g1.value(subject=a, predicate=vcard.Given)

    email2 = g2.value(subject=a, predicate=vcard.EMAIL)
    family2 = g2.value(subject=a, predicate=vcard.Family)
    given2 = g2.value(subject=a, predicate=vcard.Given)
    if not email and email2:
        g1.add((a, vcard.EMAIL, email2))
    if not family and family2:
        g1.add((a, vcard.Family, family2))
    if not given and given2:
        g1.add((a, vcard.Given, given2))

print(g1.serialize(format="turtle").decode("UTF-8"))
