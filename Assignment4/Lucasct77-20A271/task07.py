# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UC1io2Dncy7ZTsaIKLi0RFDdAFM838nH

**Task 07: Querying RDF(s)**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery

g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage + "/resources/example6.rdf", format="xml")

ns = Namespace("http://somewhere#")

for a, b, c in g:
    print(a, b, c)

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""
for a, b, c in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(a)
    for a2, b2, c2 in g.triples((None, RDFS.subClassOf, a)):
        print(a2)

q1 = prepareQuery('''
  SELECT 
    ?sclass
  WHERE { 
    ?sclass rdfs:subClassOf/rdfs:subClassOf* ns:Person. 
  }
  ''',
                  initNs={"ns": ns}
                  )

for a, in g.query(q1):
    print(a)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""

for ind, b, c in g.triples((None, RDF.type, ns.Person)):
    print(ind)
for sub in g.subjects(predicate=RDFS.subClassOf, object=ns.Person):
    for ind2 in g.subjects(predicate=RDF.type, object=sub):
        print(ind2)

q2 = prepareQuery('''
    SELECT 
        ?s
      WHERE { 
        ?s rdf:type/rdfs:subClassOf* ns:Person. 
      }
    ''',
                  initNs={"ns": ns}
                  )

for a in g.query(q2):
    print(a)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**"""

q3 = prepareQuery('''
    SELECT 
        ?s ?c
      WHERE { 
        ?s rdf:type/rdfs:subClassOf* ns:Person.
        ?s rdf:type ?c
      }
    ''',
                  initNs={"ns": ns}
                  )

for a in g.query(q3):
    print(a)

for ind, b, c in g.triples((None, RDF.type, ns.Person)):
    print(ind, c)
for sub in g.subjects(predicate=RDFS.subClassOf, object=ns.Person):
    for ind, b, c in g.triples((None, RDF.type, sub)):
        print(ind, c)
